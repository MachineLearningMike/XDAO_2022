/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SessionRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "getInnermostSType()": FunctionFragment;
    "getOutermostSType()": FunctionFragment;
    "registerSession(uint8)": FunctionFragment;
    "session()": FunctionFragment;
    "sessionsLastSeenBySType(uint8)": FunctionFragment;
    "unregisterSession()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInnermostSType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutermostSType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "session", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sessionsLastSeenBySType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterSession",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getInnermostSType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutermostSType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "session", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sessionsLastSeenBySType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterSession",
    data: BytesLike
  ): Result;

  events: {};
}

export class SessionRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SessionRegistrarInterface;

  functions: {
    getInnermostSType(overrides?: CallOverrides): Promise<[number]>;

    getOutermostSType(overrides?: CallOverrides): Promise<[number]>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    session(overrides?: CallOverrides): Promise<[BigNumber]>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unregisterSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getInnermostSType(overrides?: CallOverrides): Promise<number>;

  getOutermostSType(overrides?: CallOverrides): Promise<number>;

  registerSession(
    sessionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  session(overrides?: CallOverrides): Promise<BigNumber>;

  sessionsLastSeenBySType(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unregisterSession(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getInnermostSType(overrides?: CallOverrides): Promise<number>;

    getOutermostSType(overrides?: CallOverrides): Promise<number>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean] & {
        sessionType: number;
        session: BigNumber;
        lastSession: BigNumber;
        isOriginAction: boolean;
      }
    >;

    session(overrides?: CallOverrides): Promise<BigNumber>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterSession(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getInnermostSType(overrides?: CallOverrides): Promise<BigNumber>;

    getOutermostSType(overrides?: CallOverrides): Promise<BigNumber>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    session(overrides?: CallOverrides): Promise<BigNumber>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInnermostSType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutermostSType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    session(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
