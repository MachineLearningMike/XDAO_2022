/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICrossFarmInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,address,bool,uint256)": FunctionFragment;
    "changeReferrer(address,address)": FunctionFragment;
    "dailyPatrol()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "feeRates(uint8)": FunctionFragment;
    "feeStores()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "harvestAccumulated(uint256)": FunctionFragment;
    "massCompoundRewards()": FunctionFragment;
    "massHarvestRewards()": FunctionFragment;
    "massStakeRewards()": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "poolLength()": FunctionFragment;
    "set(uint256,uint256,bool,uint256)": FunctionFragment;
    "setCrssReferral(address)": FunctionFragment;
    "setReferralCommissionRate(uint256)": FunctionFragment;
    "stakeAccumulated(uint256)": FunctionFragment;
    "switchCollectOption(uint256,uint8)": FunctionFragment;
    "updateMultiplier(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "vestAccumulated(uint256)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawVest(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReferrer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPatrol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeStores", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAccumulated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massCompoundRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massHarvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massStakeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrssReferral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralCommissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAccumulated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "switchCollectOption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vestAccumulated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVest",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPatrol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massCompoundRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massHarvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massStakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCrssReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "switchCollectOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVest",
    data: BytesLike
  ): Result;

  events: {
    "ChangeReferer(address,address)": EventFragment;
    "CompoundAccumulated(address,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "HarvestAccumulated(address,uint256,uint256)": EventFragment;
    "MassCompoundRewards(address,uint256)": EventFragment;
    "MassHarvestRewards(address,uint256)": EventFragment;
    "MassStakeRewards(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMigrator(address)": EventFragment;
    "SetReferralCommissionRate(uint256)": EventFragment;
    "SetTreasuryAddress(address,address)": EventFragment;
    "SetTrustedForwarder(address)": EventFragment;
    "SetcrssReferral(address)": EventFragment;
    "StakeAccumulated(address,uint256,uint256)": EventFragment;
    "SwitchCollectOption(address,uint256,uint8)": EventFragment;
    "VestAccumulated(address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WithdrawVest(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeReferer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassCompoundRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassHarvestRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassStakeRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMigrator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralCommissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTrustedForwarder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetcrssReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwitchCollectOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawVest"): EventFragment;
}

export type ChangeRefererEvent = TypedEvent<
  [string, string] & { user: string; referrer: string }
>;

export type CompoundAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    crssAmount: BigNumber;
    lpAmount: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type HarvestAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    crssAmount: BigNumber;
  }
>;

export type MassCompoundRewardsEvent = TypedEvent<
  [string, BigNumber] & { user: string; crssAmount: BigNumber }
>;

export type MassHarvestRewardsEvent = TypedEvent<
  [string, BigNumber] & { user: string; crssAmount: BigNumber }
>;

export type MassStakeRewardsEvent = TypedEvent<
  [string, BigNumber] & { user: string; crssAmount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetMigratorEvent = TypedEvent<[string] & { migrator: string }>;

export type SetReferralCommissionRateEvent = TypedEvent<
  [BigNumber] & { referralCommissionRate: BigNumber }
>;

export type SetTreasuryAddressEvent = TypedEvent<
  [string, string] & { previousTreasury: string; newTreeausery: string }
>;

export type SetTrustedForwarderEvent = TypedEvent<
  [string] & { _trustedForwarder: string }
>;

export type SetcrssReferralEvent = TypedEvent<
  [string] & { crssReferral: string }
>;

export type StakeAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type SwitchCollectOptionEvent = TypedEvent<
  [string, BigNumber, number] & {
    user: string;
    poolId: BigNumber;
    option: number;
  }
>;

export type VestAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    crssAmount: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawVestEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export class ICrossFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICrossFarmInterface;

  functions: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailyPatrol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRates(
      sessionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    feeStores(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massCompoundRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massHarvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massStakeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    _depositFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeReferrer(
    user: string,
    referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailyPatrol(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRates(
    sessionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number]>;

  feeStores(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string]>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestAccumulated(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massCompoundRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massHarvestRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massStakeRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    _depositFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrssReferral(
    _crssReferral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralCommissionRate(
    _referralCommissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAccumulated(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  switchCollectOption(
    _pid: BigNumberish,
    newOption: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMultiplier(
    multiplierNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestAccumulated(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawVest(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dailyPatrol(overrides?: CallOverrides): Promise<boolean>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRates(
      sessionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number]>;

    feeStores(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massCompoundRewards(overrides?: CallOverrides): Promise<void>;

    massHarvestRewards(overrides?: CallOverrides): Promise<BigNumber>;

    massStakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChangeReferer(address,address)"(
      user?: string | null,
      referrer?: null
    ): TypedEventFilter<[string, string], { user: string; referrer: string }>;

    ChangeReferer(
      user?: string | null,
      referrer?: null
    ): TypedEventFilter<[string, string], { user: string; referrer: string }>;

    "CompoundAccumulated(address,uint256,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null,
      lpAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        crssAmount: BigNumber;
        lpAmount: BigNumber;
      }
    >;

    CompoundAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null,
      lpAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        crssAmount: BigNumber;
        lpAmount: BigNumber;
      }
    >;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "HarvestAccumulated(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    HarvestAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    "MassCompoundRewards(address,uint256)"(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    MassCompoundRewards(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    "MassHarvestRewards(address,uint256)"(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    MassHarvestRewards(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    "MassStakeRewards(address,uint256)"(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    MassStakeRewards(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetMigrator(address)"(
      migrator?: null
    ): TypedEventFilter<[string], { migrator: string }>;

    SetMigrator(
      migrator?: null
    ): TypedEventFilter<[string], { migrator: string }>;

    "SetReferralCommissionRate(uint256)"(
      referralCommissionRate?: null
    ): TypedEventFilter<[BigNumber], { referralCommissionRate: BigNumber }>;

    SetReferralCommissionRate(
      referralCommissionRate?: null
    ): TypedEventFilter<[BigNumber], { referralCommissionRate: BigNumber }>;

    "SetTreasuryAddress(address,address)"(
      previousTreasury?: null,
      newTreeausery?: null
    ): TypedEventFilter<
      [string, string],
      { previousTreasury: string; newTreeausery: string }
    >;

    SetTreasuryAddress(
      previousTreasury?: null,
      newTreeausery?: null
    ): TypedEventFilter<
      [string, string],
      { previousTreasury: string; newTreeausery: string }
    >;

    "SetTrustedForwarder(address)"(
      _trustedForwarder?: null
    ): TypedEventFilter<[string], { _trustedForwarder: string }>;

    SetTrustedForwarder(
      _trustedForwarder?: null
    ): TypedEventFilter<[string], { _trustedForwarder: string }>;

    "SetcrssReferral(address)"(
      crssReferral?: string | null
    ): TypedEventFilter<[string], { crssReferral: string }>;

    SetcrssReferral(
      crssReferral?: string | null
    ): TypedEventFilter<[string], { crssReferral: string }>;

    "StakeAccumulated(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    StakeAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "SwitchCollectOption(address,uint256,uint8)"(
      user?: string | null,
      poolId?: null,
      option?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { user: string; poolId: BigNumber; option: number }
    >;

    SwitchCollectOption(
      user?: string | null,
      poolId?: null,
      option?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { user: string; poolId: BigNumber; option: number }
    >;

    "VestAccumulated(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    VestAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "WithdrawVest(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    WithdrawVest(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailyPatrol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRates(
      sessionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeStores(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massCompoundRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massHarvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massStakeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailyPatrol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRates(
      sessionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeStores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massCompoundRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massHarvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massStakeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
