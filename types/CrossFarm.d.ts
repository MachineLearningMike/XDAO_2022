/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrossFarmInterface extends ethers.utils.Interface {
  functions: {
    "add(uint256,address,bool,uint256)": FunctionFragment;
    "bonusMultiplier()": FunctionFragment;
    "changeReferrer(address,address)": FunctionFragment;
    "crssPerBlock()": FunctionFragment;
    "dailyPatrol()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "feeRates(uint8)": FunctionFragment;
    "feeStores()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPairQuick(address,address)": FunctionFragment;
    "getSubPooledCrss(uint256,address)": FunctionFragment;
    "getUserState(uint256,address)": FunctionFragment;
    "getVestList(uint256,address)": FunctionFragment;
    "harvestAccumulated(uint256)": FunctionFragment;
    "informOfPair(address,address,address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "lastPatrolDay()": FunctionFragment;
    "massCompoundRewards()": FunctionFragment;
    "massHarvestRewards()": FunctionFragment;
    "massStakeRewards()": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "migrate(uint256)": FunctionFragment;
    "migrator()": FunctionFragment;
    "nextNode()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "prevNode()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,bool,uint256)": FunctionFragment;
    "setCrssReferral(address)": FunctionFragment;
    "setFeeParams(uint256,uint256,address,uint256)": FunctionFragment;
    "setFeeRates(uint8,(uint32,uint32,uint32,uint32),address)": FunctionFragment;
    "setFeeStores((address,address,address,address),address)": FunctionFragment;
    "setMigrator(address)": FunctionFragment;
    "setNode(uint8,address,address)": FunctionFragment;
    "setReferralCommissionRate(uint256)": FunctionFragment;
    "setTrustedForwarder(address)": FunctionFragment;
    "stakeAccumulated(uint256)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "switchCollectOption(uint256,uint8)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "updateMultiplier(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "vestAccumulated(uint256)": FunctionFragment;
    "wire(address,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawVest(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeReferrer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "crssPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPatrol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeStores", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPairQuick",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubPooledCrss",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestList",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestAccumulated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "informOfPair",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPatrolDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massCompoundRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massHarvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massStakeRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextNode", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prevNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCrssReferral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeParams",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRates",
    values: [
      BigNumberish,
      {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStores",
    values: [
      { develop: string; buyback: string; liquidity: string; treasury: string },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "setMigrator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNode",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralCommissionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAccumulated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "switchCollectOption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestAccumulated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wire",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVest",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crssPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPatrol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairQuick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubPooledCrss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "informOfPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPatrolDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massCompoundRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massHarvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massStakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prevNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCrssReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "switchCollectOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestAccumulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wire", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVest",
    data: BytesLike
  ): Result;

  events: {
    "ChangeReferer(address,address)": EventFragment;
    "CompoundAccumulated(address,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "HarvestAccumulated(address,uint256,uint256)": EventFragment;
    "MassCompoundRewards(address,uint256)": EventFragment;
    "MassHarvestRewards(address,uint256)": EventFragment;
    "MassStakeRewards(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetFeeRates(uint8,tuple)": EventFragment;
    "SetFeeStores(tuple)": EventFragment;
    "SetMigrator(address)": EventFragment;
    "SetNode(uint8,address,address)": EventFragment;
    "SetReferralCommissionRate(uint256)": EventFragment;
    "SetTreasuryAddress(address,address)": EventFragment;
    "SetTrustedForwarder(address)": EventFragment;
    "SetcrssReferral(address)": EventFragment;
    "StakeAccumulated(address,uint256,uint256)": EventFragment;
    "SwitchCollectOption(address,uint256,uint8)": EventFragment;
    "VestAccumulated(address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WithdrawVest(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeReferer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassCompoundRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassHarvestRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MassStakeRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeStores"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMigrator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralCommissionRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTreasuryAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTrustedForwarder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetcrssReferral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwitchCollectOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawVest"): EventFragment;
}

export type ChangeRefererEvent = TypedEvent<
  [string, string] & { user: string; referrer: string }
>;

export type CompoundAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    crssAmount: BigNumber;
    lpAmount: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type HarvestAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    crssAmount: BigNumber;
  }
>;

export type MassCompoundRewardsEvent = TypedEvent<
  [string, BigNumber] & { user: string; crssAmount: BigNumber }
>;

export type MassHarvestRewardsEvent = TypedEvent<
  [string, BigNumber] & { user: string; crssAmount: BigNumber }
>;

export type MassStakeRewardsEvent = TypedEvent<
  [string, BigNumber] & { user: string; crssAmount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetFeeRatesEvent = TypedEvent<
  [
    number,
    [number, number, number, number] & {
      develop: number;
      buyback: number;
      liquidity: number;
      treasury: number;
    }
  ] & {
    _sessionType: number;
    _feeRates: [number, number, number, number] & {
      develop: number;
      buyback: number;
      liquidity: number;
      treasury: number;
    };
  }
>;

export type SetFeeStoresEvent = TypedEvent<
  [
    [string, string, string, string] & {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    }
  ] & {
    _feeStores: [string, string, string, string] & {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    };
  }
>;

export type SetMigratorEvent = TypedEvent<[string] & { migrator: string }>;

export type SetNodeEvent = TypedEvent<
  [number, string, string] & {
    nodeType: number;
    node: string;
    msgSender: string;
  }
>;

export type SetReferralCommissionRateEvent = TypedEvent<
  [BigNumber] & { referralCommissionRate: BigNumber }
>;

export type SetTreasuryAddressEvent = TypedEvent<
  [string, string] & { previousTreasury: string; newTreeausery: string }
>;

export type SetTrustedForwarderEvent = TypedEvent<
  [string] & { _trustedForwarder: string }
>;

export type SetcrssReferralEvent = TypedEvent<
  [string] & { crssReferral: string }
>;

export type StakeAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type SwitchCollectOptionEvent = TypedEvent<
  [string, BigNumber, number] & {
    user: string;
    poolId: BigNumber;
    option: number;
  }
>;

export type VestAccumulatedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    crssAmount: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export type WithdrawVestEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    pid: BigNumber;
    amount: BigNumber;
  }
>;

export class CrossFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrossFarmInterface;

  functions: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crssPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    dailyPatrol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        develop: number;
        buyback: number;
        liquidity: number;
        treasury: number;
      }
    >;

    feeStores(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      }
    >;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubPooledCrss(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, BigNumber] & { toVest: BigNumber; toAccumulate: BigNumber }]
    >;

    getUserState(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          collectOption: BigNumber;
          deposit: BigNumber;
          accRewards: BigNumber;
          totalVest: BigNumber;
          totalMatureVest: BigNumber;
          pendingCrss: BigNumber;
          rewardPayroll: BigNumber;
          lpBalance: BigNumber;
          crssBalance: BigNumber;
          totalAccRewards: BigNumber;
        }
      ]
    >;

    getVestList(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber] & {
          principal: BigNumber;
          withdrawn: BigNumber;
          startTime: BigNumber;
        })[]
      ]
    >;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastPatrolDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    massCompoundRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massHarvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massStakeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    nextNode(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accCrssPerShare: BigNumber;
        depositFeeRate: BigNumber;
        reward: BigNumber;
        OnOff: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
        OnOn: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
        OffOn: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
        OffOff: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    prevNode(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeParams(
      _referralCommissionRate: BigNumberish,
      _nonVestBurnRate: BigNumberish,
      _stakeholders: string,
      _compoundFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        debt1: BigNumber;
        debt2: BigNumber;
        accumulated: BigNumber;
        collectOption: number;
      }
    >;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    _allocPoint: BigNumberish,
    _lpToken: string,
    _withUpdate: boolean,
    _depositFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  changeReferrer(
    user: string,
    referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crssPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  dailyPatrol(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      develop: number;
      buyback: number;
      liquidity: number;
      treasury: number;
    }
  >;

  feeStores(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    }
  >;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPairQuick(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubPooledCrss(
    pid: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { toVest: BigNumber; toAccumulate: BigNumber }
  >;

  getUserState(
    pid: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      collectOption: BigNumber;
      deposit: BigNumber;
      accRewards: BigNumber;
      totalVest: BigNumber;
      totalMatureVest: BigNumber;
      pendingCrss: BigNumber;
      rewardPayroll: BigNumber;
      lpBalance: BigNumber;
      crssBalance: BigNumber;
      totalAccRewards: BigNumber;
    }
  >;

  getVestList(
    pid: BigNumberish,
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber] & {
      principal: BigNumber;
      withdrawn: BigNumber;
      startTime: BigNumber;
    })[]
  >;

  harvestAccumulated(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  informOfPair(
    pair: string,
    token0: string,
    token1: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastPatrolDay(overrides?: CallOverrides): Promise<BigNumber>;

  massCompoundRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massHarvestRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massStakeRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  nextNode(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Comp: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      },
      [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Comp: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
        Vest: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      },
      [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Vest: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
        Accum: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      },
      [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Accum: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      }
    ] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accCrssPerShare: BigNumber;
      depositFeeRate: BigNumber;
      reward: BigNumber;
      OnOff: [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Comp: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      };
      OnOn: [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Comp: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
        Vest: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      };
      OffOn: [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Vest: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
        Accum: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      };
      OffOff: [
        BigNumber,
        [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
      ] & {
        sumAmount: BigNumber;
        Accum: [BigNumber, BigNumber] & {
          bulk: BigNumber;
          accPerShare: BigNumber;
        };
      };
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  prevNode(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    _depositFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrssReferral(
    _crssReferral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeParams(
    _referralCommissionRate: BigNumberish,
    _nonVestBurnRate: BigNumberish,
    _stakeholders: string,
    _compoundFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRates(
    _sessionType: BigNumberish,
    _feeRates: {
      develop: BigNumberish;
      buyback: BigNumberish;
      liquidity: BigNumberish;
      treasury: BigNumberish;
    },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeStores(
    _feeStores: {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrator(
    _migrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNode(
    nodeType: BigNumberish,
    node: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralCommissionRate(
    _referralCommissionRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrustedForwarder(
    _trustedForwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAccumulated(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  switchCollectOption(
    _pid: BigNumberish,
    newOption: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  updateMultiplier(
    multiplierNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      debt1: BigNumber;
      debt2: BigNumber;
      accumulated: BigNumber;
      collectOption: number;
    }
  >;

  vestAccumulated(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wire(
    _prevNode: string,
    _nextNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawVest(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    crssPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    dailyPatrol(overrides?: CallOverrides): Promise<boolean>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        develop: number;
        buyback: number;
        liquidity: number;
        treasury: number;
      }
    >;

    feeStores(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      }
    >;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubPooledCrss(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toVest: BigNumber; toAccumulate: BigNumber }
    >;

    getUserState(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collectOption: BigNumber;
        deposit: BigNumber;
        accRewards: BigNumber;
        totalVest: BigNumber;
        totalMatureVest: BigNumber;
        pendingCrss: BigNumber;
        rewardPayroll: BigNumber;
        lpBalance: BigNumber;
        crssBalance: BigNumber;
        totalAccRewards: BigNumber;
      }
    >;

    getVestList(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber] & {
        principal: BigNumber;
        withdrawn: BigNumber;
        startTime: BigNumber;
      })[]
    >;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastPatrolDay(overrides?: CallOverrides): Promise<BigNumber>;

    massCompoundRewards(overrides?: CallOverrides): Promise<void>;

    massHarvestRewards(overrides?: CallOverrides): Promise<BigNumber>;

    massStakeRewards(overrides?: CallOverrides): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    migrate(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    migrator(overrides?: CallOverrides): Promise<string>;

    nextNode(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        },
        [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        }
      ] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accCrssPerShare: BigNumber;
        depositFeeRate: BigNumber;
        reward: BigNumber;
        OnOff: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
        OnOn: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Comp: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
        OffOn: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber },
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Vest: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
        OffOff: [
          BigNumber,
          [BigNumber, BigNumber] & { bulk: BigNumber; accPerShare: BigNumber }
        ] & {
          sumAmount: BigNumber;
          Accum: [BigNumber, BigNumber] & {
            bulk: BigNumber;
            accPerShare: BigNumber;
          };
        };
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeParams(
      _referralCommissionRate: BigNumberish,
      _nonVestBurnRate: BigNumberish,
      _stakeholders: string,
      _compoundFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrator(_migrator: string, overrides?: CallOverrides): Promise<void>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        debt1: BigNumber;
        debt2: BigNumber;
        accumulated: BigNumber;
        collectOption: number;
      }
    >;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChangeReferer(address,address)"(
      user?: string | null,
      referrer?: null
    ): TypedEventFilter<[string, string], { user: string; referrer: string }>;

    ChangeReferer(
      user?: string | null,
      referrer?: null
    ): TypedEventFilter<[string, string], { user: string; referrer: string }>;

    "CompoundAccumulated(address,uint256,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null,
      lpAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        crssAmount: BigNumber;
        lpAmount: BigNumber;
      }
    >;

    CompoundAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null,
      lpAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        pid: BigNumber;
        crssAmount: BigNumber;
        lpAmount: BigNumber;
      }
    >;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "HarvestAccumulated(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    HarvestAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    "MassCompoundRewards(address,uint256)"(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    MassCompoundRewards(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    "MassHarvestRewards(address,uint256)"(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    MassHarvestRewards(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    "MassStakeRewards(address,uint256)"(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    MassStakeRewards(
      user?: string | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; crssAmount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetFeeRates(uint8,tuple)"(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [
        number,
        [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        }
      ],
      {
        _sessionType: number;
        _feeRates: [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        };
      }
    >;

    SetFeeRates(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [
        number,
        [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        }
      ],
      {
        _sessionType: number;
        _feeRates: [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        };
      }
    >;

    "SetFeeStores(tuple)"(
      _feeStores?: null
    ): TypedEventFilter<
      [
        [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        }
      ],
      {
        _feeStores: [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        };
      }
    >;

    SetFeeStores(
      _feeStores?: null
    ): TypedEventFilter<
      [
        [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        }
      ],
      {
        _feeStores: [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        };
      }
    >;

    "SetMigrator(address)"(
      migrator?: null
    ): TypedEventFilter<[string], { migrator: string }>;

    SetMigrator(
      migrator?: null
    ): TypedEventFilter<[string], { migrator: string }>;

    "SetNode(uint8,address,address)"(
      nodeType?: null,
      node?: null,
      msgSender?: null
    ): TypedEventFilter<
      [number, string, string],
      { nodeType: number; node: string; msgSender: string }
    >;

    SetNode(
      nodeType?: null,
      node?: null,
      msgSender?: null
    ): TypedEventFilter<
      [number, string, string],
      { nodeType: number; node: string; msgSender: string }
    >;

    "SetReferralCommissionRate(uint256)"(
      referralCommissionRate?: null
    ): TypedEventFilter<[BigNumber], { referralCommissionRate: BigNumber }>;

    SetReferralCommissionRate(
      referralCommissionRate?: null
    ): TypedEventFilter<[BigNumber], { referralCommissionRate: BigNumber }>;

    "SetTreasuryAddress(address,address)"(
      previousTreasury?: null,
      newTreeausery?: null
    ): TypedEventFilter<
      [string, string],
      { previousTreasury: string; newTreeausery: string }
    >;

    SetTreasuryAddress(
      previousTreasury?: null,
      newTreeausery?: null
    ): TypedEventFilter<
      [string, string],
      { previousTreasury: string; newTreeausery: string }
    >;

    "SetTrustedForwarder(address)"(
      _trustedForwarder?: null
    ): TypedEventFilter<[string], { _trustedForwarder: string }>;

    SetTrustedForwarder(
      _trustedForwarder?: null
    ): TypedEventFilter<[string], { _trustedForwarder: string }>;

    "SetcrssReferral(address)"(
      crssReferral?: string | null
    ): TypedEventFilter<[string], { crssReferral: string }>;

    SetcrssReferral(
      crssReferral?: string | null
    ): TypedEventFilter<[string], { crssReferral: string }>;

    "StakeAccumulated(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    StakeAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "SwitchCollectOption(address,uint256,uint8)"(
      user?: string | null,
      poolId?: null,
      option?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { user: string; poolId: BigNumber; option: number }
    >;

    SwitchCollectOption(
      user?: string | null,
      poolId?: null,
      option?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { user: string; poolId: BigNumber; option: number }
    >;

    "VestAccumulated(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    VestAccumulated(
      user?: string | null,
      pid?: BigNumberish | null,
      crssAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; crssAmount: BigNumber }
    >;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    "WithdrawVest(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    WithdrawVest(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crssPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    dailyPatrol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeStores(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubPooledCrss(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserState(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestList(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPatrolDay(overrides?: CallOverrides): Promise<BigNumber>;

    massCompoundRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massHarvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massStakeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    nextNode(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeParams(
      _referralCommissionRate: BigNumberish,
      _nonVestBurnRate: BigNumberish,
      _stakeholders: string,
      _compoundFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _allocPoint: BigNumberish,
      _lpToken: string,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bonusMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeReferrer(
      user: string,
      referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crssPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyPatrol(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeStores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubPooledCrss(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserState(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestList(
      pid: BigNumberish,
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPatrolDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    massCompoundRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massHarvestRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massStakeRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      _depositFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrssReferral(
      _crssReferral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeParams(
      _referralCommissionRate: BigNumberish,
      _nonVestBurnRate: BigNumberish,
      _stakeholders: string,
      _compoundFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralCommissionRate(
      _referralCommissionRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedForwarder(
      _trustedForwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    switchCollectOption(
      _pid: BigNumberish,
      newOption: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMultiplier(
      multiplierNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestAccumulated(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVest(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
