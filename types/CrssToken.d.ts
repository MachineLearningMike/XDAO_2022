/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrssTokenInterface extends ethers.utils.Interface {
  functions: {
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "_decreaseAllowance(address,address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "bury(address,uint256)": FunctionFragment;
    "changeMaxTransferAmountRate(uint256)": FunctionFragment;
    "checkpoints(address,uint32)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "feeRates(uint8)": FunctionFragment;
    "feeStores()": FunctionFragment;
    "getCurrentVotes(address)": FunctionFragment;
    "getInnermostSType()": FunctionFragment;
    "getOutermostSType()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPairQuick(address,address)": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "informOfPair(address,address,address,address)": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "maxTransferAmount()": FunctionFragment;
    "maxTransferAmountRate()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextNode()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairs(address)": FunctionFragment;
    "payFeeCrssLogic(address,uint256,(uint32,uint32,uint32,uint32),bool)": FunctionFragment;
    "prevNode()": FunctionFragment;
    "registerSession(uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "session()": FunctionFragment;
    "sessionsLastSeenBySType(uint8)": FunctionFragment;
    "setFeeRates(uint8,(uint32,uint32,uint32,uint32),address)": FunctionFragment;
    "setFeeStores((address,address,address,address),address)": FunctionFragment;
    "setNode(uint8,address,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tolerableTransfer(address,address,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterSession()": FunctionFragment;
    "wire(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_decreaseAllowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bury",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaxTransferAmountRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeStores", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getInnermostSType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutermostSType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPairQuick",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "informOfPair",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTransferAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTransferAmountRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nextNode", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairs", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payFeeCrssLogic",
    values: [
      string,
      BigNumberish,
      {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "prevNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerSession",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "session", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sessionsLastSeenBySType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRates",
    values: [
      BigNumberish,
      {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeStores",
    values: [
      { develop: string; buyback: string; liquidity: string; treasury: string },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNode",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tolerableTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterSession",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wire",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMaxTransferAmountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeStores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInnermostSType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutermostSType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairQuick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "informOfPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTransferAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTransferAmountRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payFeeCrssLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "session", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sessionsLastSeenBySType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tolerableTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wire", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetFeeRates(uint8,tuple)": EventFragment;
    "SetFeeStores(tuple)": EventFragment;
    "SetNode(uint8,address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeStores"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type DelegateChangedEvent = TypedEvent<
  [string, string, string] & {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
>;

export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    delegate: string;
    previousBalance: BigNumber;
    newBalance: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetFeeRatesEvent = TypedEvent<
  [
    number,
    [number, number, number, number] & {
      develop: number;
      buyback: number;
      liquidity: number;
      treasury: number;
    }
  ] & {
    _sessionType: number;
    _feeRates: [number, number, number, number] & {
      develop: number;
      buyback: number;
      liquidity: number;
      treasury: number;
    };
  }
>;

export type SetFeeStoresEvent = TypedEvent<
  [
    [string, string, string, string] & {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    }
  ] & {
    _feeStores: [string, string, string, string] & {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    };
  }
>;

export type SetNodeEvent = TypedEvent<
  [number, string, string] & {
    nodeType: number;
    node: string;
    msgSender: string;
  }
>;

export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    crssPart: BigNumber;
    crssForEthPart: BigNumber;
    ethPart: BigNumber;
    liquidity: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class CrssToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrssTokenInterface;

  functions: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bury(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMaxTransferAmountRate(
      _maxTransferAmountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<[string]>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        develop: number;
        buyback: number;
        liquidity: number;
        treasury: number;
      }
    >;

    feeStores(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      }
    >;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInnermostSType(overrides?: CallOverrides): Promise<[number]>;

    getOutermostSType(overrides?: CallOverrides): Promise<[number]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTransferAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTransferAmountRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextNode(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    payFeeCrssLogic(
      payer: string,
      principal: BigNumberish,
      rates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      fromAllowance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prevNode(overrides?: CallOverrides): Promise<[string]>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    session(overrides?: CallOverrides): Promise<[BigNumber]>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tolerableTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  _decreaseAllowance(
    _owner: string,
    _spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bury(
    from: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMaxTransferAmountRate(
    _maxTransferAmountRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

  feeRates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      develop: number;
      buyback: number;
      liquidity: number;
      treasury: number;
    }
  >;

  feeStores(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    }
  >;

  getCurrentVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInnermostSType(overrides?: CallOverrides): Promise<number>;

  getOutermostSType(overrides?: CallOverrides): Promise<number>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPairQuick(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPriorVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  informOfPair(
    pair: string,
    token0: string,
    token1: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  maxTransferAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxTransferAmountRate(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nextNode(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  payFeeCrssLogic(
    payer: string,
    principal: BigNumberish,
    rates: {
      develop: BigNumberish;
      buyback: BigNumberish;
      liquidity: BigNumberish;
      treasury: BigNumberish;
    },
    fromAllowance: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prevNode(overrides?: CallOverrides): Promise<string>;

  registerSession(
    sessionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  session(overrides?: CallOverrides): Promise<BigNumber>;

  sessionsLastSeenBySType(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFeeRates(
    _sessionType: BigNumberish,
    _feeRates: {
      develop: BigNumberish;
      buyback: BigNumberish;
      liquidity: BigNumberish;
      treasury: BigNumberish;
    },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeStores(
    _feeStores: {
      develop: string;
      buyback: string;
      liquidity: string;
      treasury: string;
    },
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNode(
    nodeType: BigNumberish,
    node: string,
    caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tolerableTransfer(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterSession(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wire(
    _prevNode: string,
    _nextNode: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bury(
      from: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeMaxTransferAmountRate(
      _maxTransferAmountRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<string>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        develop: number;
        buyback: number;
        liquidity: number;
        treasury: number;
      }
    >;

    feeStores(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      }
    >;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInnermostSType(overrides?: CallOverrides): Promise<number>;

    getOutermostSType(overrides?: CallOverrides): Promise<number>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransferAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransferAmountRate(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nextNode(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    payFeeCrssLogic(
      payer: string,
      principal: BigNumberish,
      rates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      fromAllowance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<string>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean] & {
        sessionType: number;
        session: BigNumber;
        lastSession: BigNumber;
        isOriginAction: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    session(overrides?: CallOverrides): Promise<BigNumber>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tolerableTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterSession(overrides?: CallOverrides): Promise<void>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "DelegateChanged(address,address,address)"(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    "DelegateVotesChanged(address,uint256,uint256)"(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetFeeRates(uint8,tuple)"(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [
        number,
        [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        }
      ],
      {
        _sessionType: number;
        _feeRates: [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        };
      }
    >;

    SetFeeRates(
      _sessionType?: null,
      _feeRates?: null
    ): TypedEventFilter<
      [
        number,
        [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        }
      ],
      {
        _sessionType: number;
        _feeRates: [number, number, number, number] & {
          develop: number;
          buyback: number;
          liquidity: number;
          treasury: number;
        };
      }
    >;

    "SetFeeStores(tuple)"(
      _feeStores?: null
    ): TypedEventFilter<
      [
        [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        }
      ],
      {
        _feeStores: [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        };
      }
    >;

    SetFeeStores(
      _feeStores?: null
    ): TypedEventFilter<
      [
        [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        }
      ],
      {
        _feeStores: [string, string, string, string] & {
          develop: string;
          buyback: string;
          liquidity: string;
          treasury: string;
        };
      }
    >;

    "SetNode(uint8,address,address)"(
      nodeType?: null,
      node?: null,
      msgSender?: null
    ): TypedEventFilter<
      [number, string, string],
      { nodeType: number; node: string; msgSender: string }
    >;

    SetNode(
      nodeType?: null,
      node?: null,
      msgSender?: null
    ): TypedEventFilter<
      [number, string, string],
      { nodeType: number; node: string; msgSender: string }
    >;

    "SwapAndLiquify(uint256,uint256,uint256,uint256)"(
      crssPart?: null,
      crssForEthPart?: null,
      ethPart?: null,
      liquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        crssPart: BigNumber;
        crssForEthPart: BigNumber;
        ethPart: BigNumber;
        liquidity: BigNumber;
      }
    >;

    SwapAndLiquify(
      crssPart?: null,
      crssForEthPart?: null,
      ethPart?: null,
      liquidity?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        crssPart: BigNumber;
        crssForEthPart: BigNumber;
        ethPart: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bury(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMaxTransferAmountRate(
      _maxTransferAmountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(delegator: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeStores(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInnermostSType(overrides?: CallOverrides): Promise<BigNumber>;

    getOutermostSType(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransferAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTransferAmountRate(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextNode(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    payFeeCrssLogic(
      payer: string,
      principal: BigNumberish,
      rates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      fromAllowance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prevNode(overrides?: CallOverrides): Promise<BigNumber>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    session(overrides?: CallOverrides): Promise<BigNumber>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tolerableTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _decreaseAllowance(
      _owner: string,
      _spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bury(
      from: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMaxTransferAmountRate(
      _maxTransferAmountRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      delegator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeStores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInnermostSType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutermostSType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairQuick(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    informOfPair(
      pair: string,
      token0: string,
      token1: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransferAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTransferAmountRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payFeeCrssLogic(
      payer: string,
      principal: BigNumberish,
      rates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      fromAllowance: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prevNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSession(
      sessionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    session(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sessionsLastSeenBySType(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeRates(
      _sessionType: BigNumberish,
      _feeRates: {
        develop: BigNumberish;
        buyback: BigNumberish;
        liquidity: BigNumberish;
        treasury: BigNumberish;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeStores(
      _feeStores: {
        develop: string;
        buyback: string;
        liquidity: string;
        treasury: string;
      },
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNode(
      nodeType: BigNumberish,
      node: string,
      caller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tolerableTransfer(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterSession(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wire(
      _prevNode: string,
      _nextNode: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
