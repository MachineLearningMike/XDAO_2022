/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface XdaoAgencyInterface extends ethers.utils.Interface {
  functions: {
    "agentInfo(address)": FunctionFragment;
    "agentVerifiedTask(address,uint256)": FunctionFragment;
    "assignTask(uint256,uint256[])": FunctionFragment;
    "bidden(uint256,address)": FunctionFragment;
    "bidders(uint256,uint256)": FunctionFragment;
    "compeletTask(uint256)": FunctionFragment;
    "completeTask(uint256)": FunctionFragment;
    "doers(uint256,uint256)": FunctionFragment;
    "enterEscrow(uint256)": FunctionFragment;
    "getAvaliabeTasks(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isAgent(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBid(uint256)": FunctionFragment;
    "postTask(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNumVerificationsNeeded(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "submitTask((string,string,uint256,uint256,uint8,uint8,uint8,uint8,uint8[],address,uint256,uint256))": FunctionFragment;
    "taskVerifiersCount(uint256)": FunctionFragment;
    "tasks(uint256)": FunctionFragment;
    "tgr()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unStake(uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "verifyTask(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "agentInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "agentVerifiedTask",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assignTask",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bidden",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compeletTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvaliabeTasks",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "isAgent", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNumVerificationsNeeded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [
      {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskVerifiersCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "tgr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTask",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "agentInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agentVerifiedTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assignTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidden", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compeletTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvaliabeTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumVerificationsNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskVerifiersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tgr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyTask", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "BidAccepted(uint256,address)": EventFragment;
    "BidPlaced(uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LevelUpdate(address,uint256)": EventFragment;
    "NewAgent(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Slashed(address)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "TaskAssigned(uint256,address)": EventFragment;
    "TaskCreated(uint256,string,uint256,uint256,uint256,address)": EventFragment;
    "TaskPosted(uint256)": EventFragment;
    "TaskValidated(uint256)": EventFragment;
    "TaskVerified(uint256)": EventFragment;
    "TgrBonus(address,uint256)": EventFragment;
    "UnStake(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAgent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskAssigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskPosted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TgrBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type BidAcceptedEvent = TypedEvent<
  [BigNumber, string] & { taskId: BigNumber; carrer: string }
>;

export type BidPlacedEvent = TypedEvent<
  [BigNumber, string] & { taskId: BigNumber; carrer: string }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type LevelUpdateEvent = TypedEvent<
  [string, BigNumber] & { agent: string; level: BigNumber }
>;

export type NewAgentEvent = TypedEvent<[string] & { agent: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SlashedEvent = TypedEvent<[string] & { agent: string }>;

export type StakeEvent = TypedEvent<
  [string, BigNumber] & { agent: string; amount: BigNumber }
>;

export type TaskAssignedEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; doer: string }
>;

export type TaskCreated_uint256_string_uint256_uint256_uint256_address_Event =
  TypedEvent<
    [BigNumber, string, BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      name: string;
      reward: BigNumber;
      status: BigNumber;
      minLevel: BigNumber;
      creator: string;
    }
  >;

export type TaskCreated_address_uint256_Event = TypedEvent<
  [string, BigNumber] & { agent: string; taskId: BigNumber }
>;

export type TaskPostedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type TaskValidatedEvent = TypedEvent<
  [BigNumber] & { taskId: BigNumber }
>;

export type TaskVerifiedEvent = TypedEvent<[BigNumber] & { id: BigNumber }>;

export type TgrBonusEvent = TypedEvent<
  [string, BigNumber] & { agent: string; taskId: BigNumber }
>;

export type UnStakeEvent = TypedEvent<
  [string, BigNumber] & { agent: string; amount: BigNumber }
>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class XdaoAgency extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: XdaoAgencyInterface;

  functions: {
    agentInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        account: string;
        level: BigNumber;
        stakedAmount: BigNumber;
      }
    >;

    agentVerifiedTask(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assignTask(
      _id: BigNumberish,
      _bidders: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bidden(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bidders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    compeletTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    enterEscrow(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvaliabeTasks(agent: string, overrides?: CallOverrides): Promise<[void]>;

    initialize(
      _tgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAgent(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBid(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNumVerificationsNeeded(
      _num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      _task: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskVerifiersCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        string,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        summary: string;
        reward: BigNumber;
        bonus: BigNumber;
        minLevel: number;
        maxCompletions: number;
        jobType: number;
        status: number;
        owner: string;
        dueTime: BigNumber;
        verifiedTime: BigNumber;
      }
    >;

    tgr(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  agentInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      account: string;
      level: BigNumber;
      stakedAmount: BigNumber;
    }
  >;

  agentVerifiedTask(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  assignTask(
    _id: BigNumberish,
    _bidders: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bidden(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bidders(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  compeletTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  enterEscrow(
    taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvaliabeTasks(agent: string, overrides?: CallOverrides): Promise<void>;

  initialize(
    _tgr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAgent(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBid(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postTask(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNumVerificationsNeeded(
    _num: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    _task: {
      name: string;
      summary: string;
      reward: BigNumberish;
      bonus: BigNumberish;
      minLevel: BigNumberish;
      maxCompletions: BigNumberish;
      jobType: BigNumberish;
      status: BigNumberish;
      skillSet: BigNumberish[];
      owner: string;
      dueTime: BigNumberish;
      verifiedTime: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskVerifiersCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tasks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      string,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      summary: string;
      reward: BigNumber;
      bonus: BigNumber;
      minLevel: number;
      maxCompletions: number;
      jobType: number;
      status: number;
      owner: string;
      dueTime: BigNumber;
      verifiedTime: BigNumber;
    }
  >;

  tgr(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyTask(
    _taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    agentInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        account: string;
        level: BigNumber;
        stakedAmount: BigNumber;
      }
    >;

    agentVerifiedTask(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assignTask(
      _id: BigNumberish,
      _bidders: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    bidden(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bidders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    compeletTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    completeTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    doers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    enterEscrow(taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAvaliabeTasks(agent: string, overrides?: CallOverrides): Promise<void>;

    initialize(_tgr: string, overrides?: CallOverrides): Promise<void>;

    isAgent(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBid(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    postTask(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNumVerificationsNeeded(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitTask(
      _task: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskVerifiersCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        string,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        summary: string;
        reward: BigNumber;
        bonus: BigNumber;
        minLevel: number;
        maxCompletions: number;
        jobType: number;
        status: number;
        owner: string;
        dueTime: BigNumber;
        verifiedTime: BigNumber;
      }
    >;

    tgr(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unStake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyTask(_taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "BidAccepted(uint256,address)"(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    BidAccepted(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    "BidPlaced(uint256,address)"(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    BidPlaced(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "LevelUpdate(address,uint256)"(
      agent?: string | null,
      level?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; level: BigNumber }
    >;

    LevelUpdate(
      agent?: string | null,
      level?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; level: BigNumber }
    >;

    "NewAgent(address)"(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    NewAgent(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Slashed(address)"(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    Slashed(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    "Stake(address,uint256)"(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    Stake(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    "TaskAssigned(uint256,address)"(
      id?: null,
      doer?: null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; doer: string }>;

    TaskAssigned(
      id?: null,
      doer?: null
    ): TypedEventFilter<[BigNumber, string], { id: BigNumber; doer: string }>;

    "TaskCreated(uint256,string,uint256,uint256,uint256,address)"(
      id?: null,
      name?: null,
      reward?: null,
      status?: null,
      minLevel?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber, string],
      {
        id: BigNumber;
        name: string;
        reward: BigNumber;
        status: BigNumber;
        minLevel: BigNumber;
        creator: string;
      }
    >;

    "TaskCreated(address,uint256)"(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    "TaskPosted(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    TaskPosted(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "TaskValidated(uint256)"(
      taskId?: null
    ): TypedEventFilter<[BigNumber], { taskId: BigNumber }>;

    TaskValidated(
      taskId?: null
    ): TypedEventFilter<[BigNumber], { taskId: BigNumber }>;

    "TaskVerified(uint256)"(
      id?: null
    ): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    TaskVerified(id?: null): TypedEventFilter<[BigNumber], { id: BigNumber }>;

    "TgrBonus(address,uint256)"(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    TgrBonus(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    "UnStake(address,uint256)"(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    UnStake(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    agentInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    agentVerifiedTask(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assignTask(
      _id: BigNumberish,
      _bidders: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bidden(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    compeletTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterEscrow(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvaliabeTasks(
      agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _tgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAgent(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNumVerificationsNeeded(
      _num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTask(
      _task: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskVerifiersCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tasks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tgr(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agentInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    agentVerifiedTask(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assignTask(
      _id: BigNumberish,
      _bidders: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bidden(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compeletTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterEscrow(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvaliabeTasks(
      agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _tgr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAgent(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postTask(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNumVerificationsNeeded(
      _num: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      _task: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskVerifiersCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tasks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tgr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyTask(
      _taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
