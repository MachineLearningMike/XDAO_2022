/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IXdaoAgencyInterface extends ethers.utils.Interface {
  functions: {
    "compeletTask(uint256)": FunctionFragment;
    "enterEscrow(uint256)": FunctionFragment;
    "getAvaliabeTasks(address)": FunctionFragment;
    "placeBid(uint256)": FunctionFragment;
    "postTask(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "submitTask((string,string,uint256,uint256,uint8,uint8,uint8,uint8,uint8[],address,uint256,uint256))": FunctionFragment;
    "unStake(uint256)": FunctionFragment;
    "verifyTask(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "compeletTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvaliabeTasks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [
      {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTask",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "compeletTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvaliabeTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyTask", data: BytesLike): Result;

  events: {
    "BidAccepted(uint256,address)": EventFragment;
    "BidPlaced(uint256,address)": EventFragment;
    "LevelUpdate(address,uint256)": EventFragment;
    "NewAgent(address)": EventFragment;
    "Slashed(address)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "TaskCreated(address,uint256)": EventFragment;
    "TaskValidated(uint256)": EventFragment;
    "TgrBonus(address,uint256)": EventFragment;
    "UnStake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LevelUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAgent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Slashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TgrBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStake"): EventFragment;
}

export type BidAcceptedEvent = TypedEvent<
  [BigNumber, string] & { taskId: BigNumber; carrer: string }
>;

export type BidPlacedEvent = TypedEvent<
  [BigNumber, string] & { taskId: BigNumber; carrer: string }
>;

export type LevelUpdateEvent = TypedEvent<
  [string, BigNumber] & { agent: string; level: BigNumber }
>;

export type NewAgentEvent = TypedEvent<[string] & { agent: string }>;

export type SlashedEvent = TypedEvent<[string] & { agent: string }>;

export type StakeEvent = TypedEvent<
  [string, BigNumber] & { agent: string; amount: BigNumber }
>;

export type TaskCreatedEvent = TypedEvent<
  [string, BigNumber] & { agent: string; taskId: BigNumber }
>;

export type TaskValidatedEvent = TypedEvent<
  [BigNumber] & { taskId: BigNumber }
>;

export type TgrBonusEvent = TypedEvent<
  [string, BigNumber] & { agent: string; taskId: BigNumber }
>;

export type UnStakeEvent = TypedEvent<
  [string, BigNumber] & { agent: string; amount: BigNumber }
>;

export class IXdaoAgency extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IXdaoAgencyInterface;

  functions: {
    compeletTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enterEscrow(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvaliabeTasks(agent: string, overrides?: CallOverrides): Promise<[void]>;

    placeBid(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      arg0: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  compeletTask(
    taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enterEscrow(
    taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvaliabeTasks(agent: string, overrides?: CallOverrides): Promise<void>;

  placeBid(
    taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postTask(
    taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    arg0: {
      name: string;
      summary: string;
      reward: BigNumberish;
      bonus: BigNumberish;
      minLevel: BigNumberish;
      maxCompletions: BigNumberish;
      jobType: BigNumberish;
      status: BigNumberish;
      skillSet: BigNumberish[];
      owner: string;
      dueTime: BigNumberish;
      verifiedTime: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyTask(
    taskId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    compeletTask(
      taskId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterEscrow(taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAvaliabeTasks(agent: string, overrides?: CallOverrides): Promise<void>;

    placeBid(taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    postTask(taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    submitTask(
      arg0: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unStake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    verifyTask(taskId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BidAccepted(uint256,address)"(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    BidAccepted(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    "BidPlaced(uint256,address)"(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    BidPlaced(
      taskId?: null,
      carrer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { taskId: BigNumber; carrer: string }
    >;

    "LevelUpdate(address,uint256)"(
      agent?: string | null,
      level?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; level: BigNumber }
    >;

    LevelUpdate(
      agent?: string | null,
      level?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; level: BigNumber }
    >;

    "NewAgent(address)"(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    NewAgent(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    "Slashed(address)"(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    Slashed(
      agent?: string | null
    ): TypedEventFilter<[string], { agent: string }>;

    "Stake(address,uint256)"(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    Stake(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    "TaskCreated(address,uint256)"(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    TaskCreated(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    "TaskValidated(uint256)"(
      taskId?: null
    ): TypedEventFilter<[BigNumber], { taskId: BigNumber }>;

    TaskValidated(
      taskId?: null
    ): TypedEventFilter<[BigNumber], { taskId: BigNumber }>;

    "TgrBonus(address,uint256)"(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    TgrBonus(
      agent?: string | null,
      taskId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; taskId: BigNumber }
    >;

    "UnStake(address,uint256)"(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;

    UnStake(
      agent?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { agent: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    compeletTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enterEscrow(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvaliabeTasks(
      agent: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeBid(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTask(
      arg0: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    compeletTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enterEscrow(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvaliabeTasks(
      agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      arg0: {
        name: string;
        summary: string;
        reward: BigNumberish;
        bonus: BigNumberish;
        minLevel: BigNumberish;
        maxCompletions: BigNumberish;
        jobType: BigNumberish;
        status: BigNumberish;
        skillSet: BigNumberish[];
        owner: string;
        dueTime: BigNumberish;
        verifiedTime: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyTask(
      taskId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
